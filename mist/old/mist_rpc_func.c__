#include <stdint.h>
#include <string.h>
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>
#include "mist_rpc.h"
#include "mist_rpc_func.h"
#include "mist_model.h"
#include "cbson.h"
#include "wish_debug.h"
#include "wish_io.h"



enum mist_error mist_model(rpc_client_callback cb) {
    enum mist_error retval = MIST_NO_ERROR;

    uint8_t args_doc[10];
    bson_init_doc(args_doc, 10);
    mist_rpc("control.model", args_doc, cb);

    WISHDEBUG(LOG_NORMAL, "Sent Mist Model reqeuest");

    return retval;
}

enum mist_error mist_read(char *endpoint_id, rpc_client_callback cb) {
    enum mist_error retval = MIST_NO_ERROR;

    int args_doc_max_len = strlen(endpoint_id) + 50;
    uint8_t args_doc[args_doc_max_len];
    bson_init_doc(args_doc, args_doc_max_len);
    bson_write_string(args_doc, args_doc_max_len, "0", endpoint_id);

    mist_rpc( "control.read", args_doc, cb);

    WISHDEBUG(LOG_NORMAL, "Sent Mist read reqeuest");
    return retval;
}

enum mist_error mist_write(char *endpoint_id, enum mist_type type, void *value, size_t value_len, rpc_client_callback cb) {

    enum mist_error retval = MIST_NO_ERROR;

    int args_doc_max_len = 512;
    uint8_t args_doc[args_doc_max_len];
    bson_init_doc(args_doc, args_doc_max_len);
    bson_write_string(args_doc, args_doc_max_len, "0", endpoint_id);
    switch (type) {
    case MIST_TYPE_BOOL:
        bson_write_boolean(args_doc, args_doc_max_len, "1", *( (bool*) value));
        break;
    case MIST_TYPE_FLOAT:
        bson_write_int32(args_doc, args_doc_max_len, "1", 
            (*( (float*) value)) * 10);
        break;
    case MIST_TYPE_INT:
    case MIST_TYPE_STRING:
    case MIST_TYPE_INVOKE:
        WISHDEBUG(LOG_CRITICAL, "Mist write data type is not implemented.");
        break;
    }

    mist_rpc("control.write", args_doc, cb);

    WISHDEBUG(LOG_NORMAL, "Sent Mist write reqeuest");
    return retval;
}



